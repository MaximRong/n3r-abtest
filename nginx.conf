
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
     default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
	lua_shared_dict sharedMem 1m;

	init_by_lua '
		abConfigCache = {};
			';

    server {

        listen       8088;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
        

        location /openresty {
            default_type text/html;
			add_header Set-Cookie Foo=1033;
            content_by_lua '
				local seigeResult = require "n3r.SeigeResult";
				seigeResult.result();
            ';
        }
     
   
        location /abtest {
            #content_by_lua_file conf/abcontroler.lua;
			content_by_lua '
			   ngx.header.content_type = "text/plain";
			   local splitFlow = require "n3r.SplitFlow";
			   local redirect = splitFlow.rotePage("abtest");
		--	   ngx.say(redirect);
			';
        }

		location /html {
			alias /home/maxim/App/openresty/nginx/html;
		}

		location /init {
			default_type text/html;
			content_by_lua '
				--local sharedMem = ngx.shared.sharedMem;
				--local count = sharedMen:get("count");
				--ngx.say(count);
				--sharedMen:set("count", count);

				local sharedMem = ngx.shared.sharedMem;
				local reqCount = sharedMem:get("reqCount");
			    reqCount = reqCount + 1;
				-- ngx.say(reqCount);
				-- sharedMem:set("reqCount", reqCount);
				
				local a = globeO.a;
				ngx.say(globeO.f + 1);
				globeO.a = a + 1;

			';
		}
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
		
		location = /favicon.ico {
			log_not_found off;
			access_log off;
		}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
